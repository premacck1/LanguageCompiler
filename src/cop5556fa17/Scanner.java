/* *
 * Scanner for the class project in COP5556 Programming Language Principles 
 * at the University of Florida, Fall 2017.
 * 
 * This software is solely for the educational benefit of students 
 * enrolled in the course during the Fall 2017 semester.  
 * 
 * This software, and any software derived from it,  may not be shared with others or posted to public web sites,
 * either during the course or afterwards.
 * 
 *  @Beverly A. Sanders, 2017
  */

package cop5556fa17;

import java.util.*;

public class Scanner {
	
	@SuppressWarnings("serial")
	public static class LexicalException extends Exception {
		
		int pos;

		public LexicalException(String message, int pos) {
			super(message);
			this.pos = pos;
		}
		
		public int getPos() { return pos; }

	}

	public static enum Kind {
		IDENTIFIER, INTEGER_LITERAL, BOOLEAN_LITERAL, STRING_LITERAL, 
		KW_x/* x */, KW_X/* X */, KW_y/* y */, KW_Y/* Y */, KW_r/* r */, KW_R/* R */, KW_a/* a */, 
		KW_A/* A */, KW_Z/* Z */, KW_DEF_X/* DEF_X */, KW_DEF_Y/* DEF_Y */, KW_SCREEN/* SCREEN */, 
		KW_cart_x/* cart_x */, KW_cart_y/* cart_y */, KW_polar_a/* polar_a */, KW_polar_r/* polar_r */, 
		KW_abs/* abs */, KW_sin/* sin */, KW_cos/* cos */, KW_atan/* atan */, KW_log/* log */, 
		KW_image/* image */,  KW_int/* int */, 
		KW_boolean/* boolean */, KW_url/* url */, KW_file/* file */, OP_ASSIGN/* = */, OP_GT/* > */, OP_LT/* < */, 
		OP_EXCL/* ! */, OP_Q/* ? */, OP_COLON/* : */, OP_EQ/* == */, OP_NEQ/* != */, OP_GE/* >= */, OP_LE/* <= */, 
		OP_AND/* & */, OP_OR/* | */, OP_PLUS/* + */, OP_MINUS/* - */, OP_TIMES/* * */, OP_DIV/* / */, OP_MOD/* % */, 
		OP_POWER/* ** */, OP_AT/* @ */, OP_RARROW/* -> */, OP_LARROW/* <- */, LPAREN/* ( */, RPAREN/* ) */, 
		LSQUARE/* [ */, RSQUARE/* ] */, SEMI/* ; */, COMMA/* , */, EOF;
	}

	/** Class to represent Tokens. 
	 * 
	 * This is defined as a (non-static) inner class
	 * which means that each Token instance is associated with a specific 
	 * Scanner instance.  We use this when some token methods access the
	 * chars array in the associated Scanner.
	 * 
	 * 
	 * @author Beverly Sanders
	 *
	 */
	public class Token {
		public final Kind kind;
		public final int pos;
		public final int length;
		public final int line;
		public final int pos_in_line;

		public Token(Kind kind, int pos, int length, int line, int pos_in_line) {
			super();
			this.kind = kind;
			this.pos = pos;
			this.length = length;
			this.line = line;
			this.pos_in_line = pos_in_line;
		}

		public String getText() {
			if (kind == Kind.STRING_LITERAL) {
				return chars2String(chars, pos, length);
			}
			else return String.copyValueOf(chars, pos, length);
		}
		
		public boolean isKind(Kind k){
			return k == kind;
		}

		/**
		 * To get the text of a StringLiteral, we need to remove the
		 * enclosing " characters and convert escaped characters to
		 * the represented character.  For example the two characters \ t
		 * in the char array should be converted to a single tab character in
		 * the returned String
		 * 
		 * @param chars
		 * @param pos
		 * @param length
		 * @return
		 */
		private String chars2String(char[] chars, int pos, int length) {
			StringBuilder sb = new StringBuilder();
			for (int i = pos + 1; i < pos + length - 1; ++i) {// omit initial and final "
				char ch = chars[i];
				if (ch == '\\') { // handle escape
					i++;
					ch = chars[i];
					switch (ch) {
					case 'b':
						sb.append('\b');
						break;
					case 't':
						sb.append('\t');
						break;
					case 'f':
						sb.append('\f');
						break;
					case 'r':
						sb.append('\r'); //for completeness, line termination chars not allowed in String literals
						break;
					case 'n':
						sb.append('\n'); //for completeness, line termination chars not allowed in String literals
						break;
					case '\"':
						sb.append('\"');
						break;
					case '\'':
						sb.append('\'');
						break;
					case '\\':
						sb.append('\\');
						break;
					default:
						assert false;
						break;
					}
				} else {
					sb.append(ch);
				}
			}
			return sb.toString();
		}

		/**
		 * precondition:  This Token is an INTEGER_LITERAL
		 * 
		 * @returns the integer value represented by the token
		 */
		public int intVal() {
			assert kind == Kind.INTEGER_LITERAL;
			return Integer.valueOf(String.copyValueOf(chars, pos, length));
		}

		public String toString() {
			return "[" + kind + "," + String.copyValueOf(chars, pos, length)  + "," + pos + "," + length + "," + line + ","
					+ pos_in_line + "]";
		}

		/** 
		 * Since we overrode equals, we need to override hashCode.
		 * https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-
		 * 
		 * Both the equals and hashCode method were generated by eclipse
		 * 
		 */
		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + getOuterType().hashCode();
			result = prime * result + ((kind == null) ? 0 : kind.hashCode());
			result = prime * result + length;
			result = prime * result + line;
			result = prime * result + pos;
			result = prime * result + pos_in_line;
			return result;
		}

		/**
		 * Override equals method to return true if other object
		 * is the same class and all fields are equal.
		 * 
		 * Overriding this creates an obligation to override hashCode.
		 * 
		 * Both hashCode and equals were generated by eclipse.
		 * 
		 */
		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Token other = (Token) obj;
			if (!getOuterType().equals(other.getOuterType()))
				return false;
			if (kind != other.kind)
				return false;
			if (length != other.length)
				return false;
			if (line != other.line)
				return false;
			if (pos != other.pos)
				return false;
			if (pos_in_line != other.pos_in_line)
				return false;
			return true;
		}

		/**
		 * used in equals to get the Scanner object this Token is 
		 * associated with.
		 * @return
		 */
		private Scanner getOuterType() {
			return Scanner.this;
		}

	}

	/** 
	 * Extra character added to the end of the input characters to simplify the
	 * Scanner.  
	 */
	static final char EOFchar = 0;
	
	/**
	 * The list of tokens created by the scan method.
	 */
	final ArrayList<Token> tokens;
	
	/**
	 * An array of characters representing the input.  These are the characters
	 * from the input string plus and additional EOFchar at the end.
	 */
	final char[] chars;  



	
	/**
	 * position of the next token to be returned by a call to nextToken
	 */
	private int nextTokenPos = 0;

	Scanner(String inputString) {
		int numChars = inputString.length();
		this.chars = Arrays.copyOf(inputString.toCharArray(), numChars + 1); // input string terminated with null char
		chars[numChars] = EOFchar;
		tokens = new ArrayList<Token>();
	}


	/**
	 * Method to scan the input and create a list of Tokens.
	 * 
	 * If an error is encountered during scanning, throw a LexicalException.
	 * 
	 * @return
	 * @throws LexicalException
	 */
	public Scanner scan() throws LexicalException {
		/* TODO  Replace this with a correct and complete implementation!!! */
		int pos = 0;
		int line = 1;
		int posInLine = 1;
		Map<String, String> keyword_map = new HashMap<>();
		populateMap(keyword_map);
		char currentChar = chars[pos];
		Token currentToken = null;
		while(currentChar!=EOFchar){
//			boolean invalid = true;
			if(currentChar=='\r'){
				currentToken = null;
				if(chars[pos+1]=='\n'){
					posInLine =1;
					line+=1;
					pos+=2;	
				}else{
					posInLine =1;
					line+=1;
					pos+=1;	
				}
			}else if(currentChar=='\n'){
				currentToken = null;
				posInLine =1;
				line+=1;
				pos+=1;
			}
			else if(Character.isWhitespace(currentChar)){
				while(Character.isWhitespace(currentChar) && (currentChar != '\r'&& currentChar != '\n')){
					pos+=1;
					posInLine+=1;
					currentChar  = chars[pos];
				}
				currentToken = null;
			}
			else if(currentChar=='/' && chars[pos+1]=='/'){
				
				while(currentChar!='\r' && currentChar!='\n' && currentChar!=EOFchar){
					pos+=1;
					posInLine+=1;
					currentChar = chars[pos];
				}
				currentToken = null;
			}else{
				
			// CHeck in sequence: Separator , Operator, Keyword, Literal, Identifiers
			switch (currentChar) {
			
			// **** Separator Start ****
			case '(':
				currentToken = new Token(Kind.LPAREN, pos, 1, line, posInLine);
				pos++;
				posInLine++;
				break;
			
			case ')':
				currentToken = new Token(Kind.RPAREN, pos, 1, line, posInLine);
				pos++;
				posInLine++;
				break;
				
			case '[':
				currentToken = new Token(Kind.LSQUARE, pos, 1, line, posInLine);
				pos++;
				posInLine++;
				break;
				
			case ']':
				currentToken = new Token(Kind.RSQUARE, pos, 1, line, posInLine);
				pos++;
				posInLine++;
				break;
				
			case ';':
				currentToken = new Token(Kind.SEMI, pos, 1, line, posInLine);
				pos++;
				posInLine++;
				break;
				
			case ',':
				currentToken = new Token(Kind.COMMA, pos, 1, line, posInLine);
				pos++;
				posInLine++;
				break;
			// **** Separator end ****
				
			// **** Operator Start **** 
			case '?':
				currentToken = new Token(Kind.OP_Q, pos, 1, line, posInLine);
				pos++;
				posInLine++;
				break;
				
			case ':':
				currentToken = new Token(Kind.OP_COLON, pos, 1, line, posInLine);
				pos++;
				posInLine++;
				break;
				
			case '&':
				currentToken = new Token(Kind.OP_AND, pos, 1, line, posInLine);
				pos++;
				posInLine++;
				break;
				
			case '|':
				currentToken = new Token(Kind.OP_OR, pos, 1, line, posInLine);
				pos++;
				posInLine++;
				break;
				
			case '+':
				currentToken = new Token(Kind.OP_PLUS, pos, 1, line, posInLine);
				pos++;
				posInLine++;
				break;
				
			case '%':
				currentToken = new Token(Kind.OP_MOD, pos, 1, line, posInLine);
				pos++;
				posInLine++;
				break;
				
			case '/':
				currentToken = new Token(Kind.OP_DIV, pos, 1, line, posInLine);
				pos++;
				posInLine++;
				break;
				
			case '@':
				currentToken = new Token(Kind.OP_AT, pos, 1, line, posInLine);
				pos++;
				posInLine++;
				break;
				
			case '=':
				if(chars[pos+1]=='='){
					currentToken = new Token(Kind.OP_EQ, pos, 2, line, posInLine);
					pos+=2;
					posInLine+=2;
				}else{
					currentToken = new Token(Kind.OP_ASSIGN, pos, 1, line, posInLine);
					pos+=1;
					posInLine+=1;
				}
				break;
				
			case '!':
				if(chars[pos+1]=='='){
					currentToken = new Token(Kind.OP_NEQ, pos, 2, line, posInLine);
					pos+=2;
					posInLine+=2;
				}else{
					currentToken = new Token(Kind.OP_EXCL, pos, 1, line, posInLine);
					pos+=1;
					posInLine+=1;
				}
				break;
			
			case '>':
				if(chars[pos+1]=='='){
					currentToken = new Token(Kind.OP_GE, pos, 2, line, posInLine);
					pos+=2;
					posInLine+=2;
				}else{
					currentToken = new Token(Kind.OP_GT, pos, 1, line, posInLine);
					pos+=1;
					posInLine+=1;
				}
				break;
				
			case '<':
				if(chars[pos+1]=='='){
					currentToken = new Token(Kind.OP_LE, pos, 2, line, posInLine);
					pos+=2;
					posInLine+=2;
				}else if(chars[pos+1]=='-'){
					currentToken = new Token(Kind.OP_LARROW, pos, 2, line, posInLine);
					pos+=2;
					posInLine+=2;
				}else {
					currentToken = new Token(Kind.OP_LT, pos, 1, line, posInLine);
					pos+=1;
					posInLine+=1;
				}
				break;
				
			case '-':
				if(chars[pos+1]=='>'){
					currentToken = new Token(Kind.OP_RARROW, pos, 2, line, posInLine);
					pos+=2;
					posInLine+=2;
				}else{
					currentToken = new Token(Kind.OP_MINUS, pos, 1, line, posInLine);
					pos+=1;
					posInLine+=1;
				}
				break;
			
			case '*':
				if(chars[pos+1]=='*'){
					currentToken = new Token(Kind.OP_POWER, pos, 2, line, posInLine);
					pos+=2;
					posInLine+=2;
				}else{
					currentToken = new Token(Kind.OP_TIMES, pos, 1, line, posInLine);
					pos+=1;
					posInLine+=1;
				}
				break;
				// **** Operator end **** 
			default:
//			tokens.add(currentToken);	
			
			// Keyword and Identifier check
			if(Character.isJavaIdentifierStart(currentChar)){
				StringBuilder sb = new StringBuilder();
				while(Character.isJavaIdentifierPart(currentChar) && currentChar != EOFchar){ // digits check included
					sb.append(currentChar);
					pos++;
					posInLine++;
					currentChar = chars[pos];
				}
				String keyword = sb.toString();
				int len = keyword.length();
				
				// **** KeyWOrds check ****
				if(keyword_map.containsKey(keyword)){
					String kind = keyword_map.get(keyword);
					currentToken = new Token(Kind.valueOf(kind), pos-len, len, line, posInLine-len);
				}
				
				// **** Boolean Literal Check ***
				else if(keyword.equals("true") || keyword.equals("false"))
				{
					currentToken = new Token(Kind.BOOLEAN_LITERAL, pos-len, len, line, posInLine-len);
				}
				
				// **** Identifier check ****	
				else{
					currentToken = new Token(Kind.IDENTIFIER, pos-len, len, line, posInLine-len);
				}
			}
			
			// **** String Literal check****
			else if(currentChar == '\"'){
				int curr_pos = pos;
				int curr_posInLine = posInLine;
				pos++;
				posInLine++;
				currentChar = chars[pos];
				while(currentChar!= '\"'){
					// End of File Check
					if(currentChar == EOFchar){
						throw new LexicalException("String Literal Terminated Prematurely. End of File Encountered at line "+line+" at position "+posInLine, pos);
					}
					// Escape Sequences Check
					else if(currentChar == '\n' ||currentChar == '\r' ){
						throw new LexicalException("String Literal Terminated Prematurely. Line Terminator character Encountered at line "+line+" at position "+posInLine, pos);						
					}
					else if(currentChar == '\\'){
						if(chars[pos+1]=='b'|| chars[pos+1]=='t'|| chars[pos+1]=='n'|| chars[pos+1]=='f'|| chars[pos+1]=='r'|| chars[pos+1]=='\"'|| chars[pos+1]=='\''|| chars[pos+1]=='\\'){
							pos++;
							posInLine++;
						}else{
							//Handle Invalid Escape sequences
							throw new LexicalException("String Literal Terminated Prematurely. Illegal escape sequence character Encountered at line "+line+" at position "+posInLine, pos+1);													
						}
					}					
					pos++;
					posInLine++;
					currentChar = chars[pos];
				}
				currentToken = new Token(Kind.STRING_LITERAL, curr_pos, pos-curr_pos+1, line, curr_posInLine);
				pos++;
				posInLine++;
			}
			// Integer Literal
			else if(Character.isDigit(currentChar)){
				if(currentChar=='0'){
					currentToken = new Token(Kind.INTEGER_LITERAL, pos, 1, line, posInLine);
					pos++;
					posInLine++;
				}
				else{
				int curr_pos = posInLine;
				StringBuilder s = new StringBuilder();	
				while(Character.isDigit(currentChar)){
					s.append(currentChar);
					pos++;
					posInLine++;
					currentChar = chars[pos];
				}
				try{
				if(Integer.parseInt(s.toString())>Integer.MAX_VALUE){
					throw new LexicalException("Integer Literal out of Range. OutofRange Integer Encountered at line "+line+" at position "+(posInLine-s.length()), pos-s.length());													
				}else{
					currentToken = new Token(Kind.INTEGER_LITERAL, pos-s.length(), s.length(), line, posInLine-s.length());	
						}
					}
				catch(Exception e){
					throw new LexicalException("Integer Literal out of Range. OutofRange Integer Encountered at line "+line+" at position "+(posInLine-s.length()), curr_pos);																		
				}
				}
			}else{
				throw new LexicalException("BackSlash not allowed in raw input. Illegal escape sequence character Encountered at line "+line+" at position "+posInLine, pos);														
			}
			break;
			}
		}
			if(currentToken!=null){
				tokens.add(currentToken);																	
			}

			currentChar = chars[pos];
		}
		tokens.add(new Token(Kind.EOF, pos, 0, line, posInLine));
		return this;

	}
	
	public boolean isIdentifierStart(char c){
		return (c>=97 && c<=122 || c>=65 && c<=90 || c== 95 || c==36);
	}
	
	public boolean isIdentifierPart(char c){
		return (c>=97 && c<=122 || c>=65 && c<=90 || c== 95 || c==36 || c>=48 && c<=57);
	}

/*	public static void main(String[] args) {
		Scanner s = new Scanner("\"abc/n");
		try {
			s.scan();
		} catch (LexicalException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}*/
	private void populateMap(Map<String, String> keyword_map) {
		// TODO Auto-generated method stub
		
			String line = "KW_x x, KW_X X, KW_y y, KW_Y Y, KW_r r, KW_R R, KW_a a, KW_A A, KW_Z Z, KW_DEF_X DEF_X, KW_DEF_Y DEF_Y, KW_SCREEN SCREEN, KW_cart_x cart_x, KW_cart_y cart_y, KW_polar_a polar_a, KW_polar_r polar_r, KW_abs abs, KW_sin sin, KW_cos cos, KW_atan atan, KW_log log, KW_image image, KW_int int, KW_boolean boolean, KW_url url, KW_file file";

				String[] kindArr = line.split(", ");
				for(String s:kindArr){
					String kindType = s.substring(0, s.indexOf(" "));
					String token = s.substring( s.indexOf(" ")+1);
					keyword_map.put(token, kindType);
				}
			// including comma seperately , COMMA/* , */
			keyword_map.put(",", "COMMA");
			
		}


	/**
	 * Returns true if the internal interator has more Tokens
	 * 
	 * @return
	 */
	public boolean hasTokens() {
		return nextTokenPos < tokens.size();
	}

	/**
	 * Returns the next Token and updates the internal iterator so that
	 * the next call to nextToken will return the next token in the list.
	 * 
	 * It is the callers responsibility to ensure that there is another Token.
	 * 
	 * Precondition:  hasTokens()
	 * @return
	 */
	public Token nextToken() {
		return tokens.get(nextTokenPos++);
	}
	
	/**
	 * Returns the next Token, but does not update the internal iterator.
	 * This means that the next call to nextToken or peek will return the
	 * same Token as returned by this methods.
	 * 
	 * It is the callers responsibility to ensure that there is another Token.
	 * 
	 * Precondition:  hasTokens()
	 * 
	 * @return next Token.
	 */
	public Token peek() {
		return tokens.get(nextTokenPos);
	}
	
	
	/**
	 * Resets the internal iterator so that the next call to peek or nextToken
	 * will return the first Token.
	 */
	public void reset() {
		nextTokenPos = 0;
	}

	/**
	 * Returns a String representation of the list of Tokens 
	 */
	public String toString() {
		StringBuffer sb = new StringBuffer();
		sb.append("Tokens:\n");
		for (int i = 0; i < tokens.size(); i++) {
			sb.append(tokens.get(i)).append('\n');
		}
		return sb.toString();
	}

}
